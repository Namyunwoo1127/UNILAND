<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.elon.boot.domain.property.model.store.PropertyMapper">

  <select id="selectOneByNo" resultType="com.elon.boot.domain.property.model.vo.Property">
    SELECT *
    FROM PROPERTY_TBL
    WHERE PROPERTY_NO = #{id, jdbcType=NUMERIC}
  </select>
	<select id="selectImagesByPropertyNo"
	        parameterType="long"
	        resultType="com.elon.boot.domain.property.model.vo.PropertyImg">
	  SELECT
	    IMG_NO            AS imgNo,
	    PROPERTY_NO       AS propertyNo,
	    IMG_PATH          AS imgPath,
	    IMG_RENAME        AS imgRename,
	    IMG_ORIGINAL_NAME AS imgOriginalName,
	    IMG_ORDER         AS imgOrder
	  FROM PROPERTIES_IMG_TBL
	  WHERE PROPERTY_NO = #{id}
	  ORDER BY IMG_ORDER ASC, IMG_NO ASC
	</select>
	<select id="selectRealtorById" resultType="com.elon.boot.domain.realtor.model.vo.Realtor">
		SELECT * 
		FROM REALTOR_TBL
		WHERE REALTOR_ID = #{rId}
	</select>


  <select id="selectOnesOption" resultType="com.elon.boot.domain.property.model.vo.PropertyOption">
    SELECT *
    FROM OPTION_TBL
    WHERE PROPERTY_NO = #{id, jdbcType=NUMERIC}
  </select>

  <select id="selectOnesImg" resultType="com.elon.boot.domain.property.model.vo.PropertyImg">
    SELECT *
    FROM (
        SELECT *
        FROM PROPERTIES_IMG_TBL
        WHERE PROPERTY_NO = #{id, jdbcType=NUMERIC}
        ORDER BY IMG_ORDER ASC
    )
    WHERE ROWNUM = 1
  </select>

  <!-- 전체 매물 목록 조회 (지도용) -->
  <select id="selectAllProperties" resultType="com.elon.boot.domain.property.model.vo.Property">
    SELECT *
    FROM PROPERTY_TBL
    WHERE STATUS = 'ACTIVE'
    ORDER BY CREATED_AT DESC
  </select>

  <!-- 필터링된 매물 목록 조회 -->
  <select id="selectPropertiesWithFilter" resultType="com.elon.boot.domain.property.model.vo.Property">
    SELECT p.*
    FROM PROPERTY_TBL p
    <where>
      p.STATUS = 'ACTIVE'

      <!-- 지역 필터 -->
      <if test="filter.regions != null and filter.regions.size() > 0">
        AND p.DISTRICT IN
        <foreach collection="filter.regions" item="region" open="(" separator="," close=")">
          #{region}
        </foreach>
      </if>

      <!-- 보증금 필터 -->
      <if test="filter.depositMin != null">
        AND p.DEPOSIT >= #{filter.depositMin}
      </if>
      <if test="filter.depositMax != null">
        AND p.DEPOSIT <![CDATA[<=]]> #{filter.depositMax}
      </if>

      <!-- 월세 필터 -->
      <if test="filter.rentMin != null">
        AND p.MONTHLY_RENT >= #{filter.rentMin}
      </if>
      <if test="filter.rentMax != null">
        AND p.MONTHLY_RENT <![CDATA[<=]]> #{filter.rentMax}
      </if>

      <!-- 매물 유형 필터 -->
      <if test="filter.propertyTypes != null and filter.propertyTypes.size() > 0">
        AND p.PROPERTY_TYPE IN
        <foreach collection="filter.propertyTypes" item="type" open="(" separator="," close=")">
          #{type}
        </foreach>
      </if>

      <!-- 학생 우대 필터 -->
      <if test="filter.studentPref != null and filter.studentPref == true">
        AND p.STUDENT_PREF = 'Y'
      </if>

      <!-- 단기 계약 필터 -->
      <if test="filter.shortCont != null and filter.shortCont == true">
        AND p.SHORT_CONT = 'Y'
      </if>

      <!-- 옵션 필터들 - EXISTS 서브쿼리 사용 -->
      <if test="filter.airConditioner != null and filter.airConditioner == true">
        AND EXISTS (SELECT 1 FROM OPTION_TBL o WHERE o.PROPERTY_NO = p.PROPERTY_NO AND o.AIR_CONDITIONER = 'Y')
      </if>
      <if test="filter.heater != null and filter.heater == true">
        AND EXISTS (SELECT 1 FROM OPTION_TBL o WHERE o.PROPERTY_NO = p.PROPERTY_NO AND o.HEATER = 'Y')
      </if>
      <if test="filter.refrigerator != null and filter.refrigerator == true">
        AND EXISTS (SELECT 1 FROM OPTION_TBL o WHERE o.PROPERTY_NO = p.PROPERTY_NO AND o.REFRIGERATOR = 'Y')
      </if>
      <if test="filter.microwave != null and filter.microwave == true">
        AND EXISTS (SELECT 1 FROM OPTION_TBL o WHERE o.PROPERTY_NO = p.PROPERTY_NO AND o.MICROWAVE = 'Y')
      </if>
      <if test="filter.induction != null and filter.induction == true">
        AND EXISTS (SELECT 1 FROM OPTION_TBL o WHERE o.PROPERTY_NO = p.PROPERTY_NO AND o.INDUCTION = 'Y')
      </if>
      <if test="filter.gasStove != null and filter.gasStove == true">
        AND EXISTS (SELECT 1 FROM OPTION_TBL o WHERE o.PROPERTY_NO = p.PROPERTY_NO AND o.GAS_STOVE = 'Y')
      </if>
      <if test="filter.washer != null and filter.washer == true">
        AND EXISTS (SELECT 1 FROM OPTION_TBL o WHERE o.PROPERTY_NO = p.PROPERTY_NO AND o.WASHER = 'Y')
      </if>
      <if test="filter.dryer != null and filter.dryer == true">
        AND EXISTS (SELECT 1 FROM OPTION_TBL o WHERE o.PROPERTY_NO = p.PROPERTY_NO AND o.DRYER = 'Y')
      </if>
      <if test="filter.bed != null and filter.bed == true">
        AND EXISTS (SELECT 1 FROM OPTION_TBL o WHERE o.PROPERTY_NO = p.PROPERTY_NO AND o.BED = 'Y')
      </if>
      <if test="filter.desk != null and filter.desk == true">
        AND EXISTS (SELECT 1 FROM OPTION_TBL o WHERE o.PROPERTY_NO = p.PROPERTY_NO AND o.DESK = 'Y')
      </if>
      <if test="filter.wardrobe != null and filter.wardrobe == true">
        AND EXISTS (SELECT 1 FROM OPTION_TBL o WHERE o.PROPERTY_NO = p.PROPERTY_NO AND o.WARDROBE = 'Y')
      </if>
      <if test="filter.shoeRack != null and filter.shoeRack == true">
        AND EXISTS (SELECT 1 FROM OPTION_TBL o WHERE o.PROPERTY_NO = p.PROPERTY_NO AND o.SHOE_RACK = 'Y')
      </if>
      <if test="filter.tv != null and filter.tv == true">
        AND EXISTS (SELECT 1 FROM OPTION_TBL o WHERE o.PROPERTY_NO = p.PROPERTY_NO AND o.TV = 'Y')
      </if>
      <if test="filter.parking != null and filter.parking == true">
        AND EXISTS (SELECT 1 FROM OPTION_TBL o WHERE o.PROPERTY_NO = p.PROPERTY_NO AND o.PARKING = 'Y')
      </if>
      <if test="filter.elevator != null and filter.elevator == true">
        AND EXISTS (SELECT 1 FROM OPTION_TBL o WHERE o.PROPERTY_NO = p.PROPERTY_NO AND o.ELEVATOR = 'Y')
      </if>
      <if test="filter.security != null and filter.security == true">
        AND EXISTS (SELECT 1 FROM OPTION_TBL o WHERE o.PROPERTY_NO = p.PROPERTY_NO AND o.SECURITY = 'Y')
      </if>
      <if test="filter.petAllowed != null and filter.petAllowed == true">
        AND EXISTS (SELECT 1 FROM OPTION_TBL o WHERE o.PROPERTY_NO = p.PROPERTY_NO AND o.PET_ALLOWED = 'Y')
      </if>
    </where>
    ORDER BY p.CREATED_AT DESC
  </select>
<!-- <insert id="insertProperty" parameterType="com.elon.boot.domain.property.model.vo.Property">
  <selectKey keyProperty="propertyNo" order="BEFORE" resultType="long">
    SELECT SEQ_PROPERTY_NO.NEXTVAL FROM DUAL
  </selectKey>
  INSERT INTO PROPERTY_TBL (
    PROPERTY_NO, REALTOR_ID,
    PROPERTY_NAME, PROPERTY_TYPE,
    ROOM, BATHROOM, FLOOR, TOTAL_FLOOR,
    CONSTRUCTION_YEAR, AVAILABLE_DATE, STUDENT_PREF, SHORT_CONT,
    PRICE_TYPE, DEPOSIT, MONTHLY_RENT, MAINTENANCE_FEE, MAINTENANCE_INCL,
    ROAD_ADDRESS, ADDRESS_DETAIL, PROVINCE, DISTRICT, LATITUDE, LONGITUDE,
    CONTRACT_AREA, DESCRIPTION, STATUS, CREATED_AT
  ) VALUES (
    #{propertyNo}, #{realtorId},
    #{propertyName}, #{propertyType},
    #{room}, #{bathroom}, #{floor}, #{totalFloor},
    #{constructionYear}, #{availableDate}, #{studentPref}, #{shortCont},
    #{priceType}, #{deposit}, #{monthlyRent}, #{maintenanceFee}, #{maintenanceIncl},
    #{roadAddress}, #{addressDetail}, #{province}, #{district}, #{latitude}, #{longitude},
    #{contractArea}, #{description}, 'ACTIVE', SYSTIMESTAMP
  )
</insert> -->
<!-- 이미지 삽입 -->
<!-- <insert id="insertPropertyImages">
  INSERT INTO PROPERTIES_IMG_TBL 
  SELECT SEQ_PROPERTIES_IMG_NO.NEXTVAL , BI.*
  FROM (
  	<foreach collection="list" item="img" separator=" UNION ALL ">
  	SELECT 	#{img.propertyNo} 		PROPERTY_NO,
  			#{img.imgPath}			IMG_PATH,
  			#{img.imgRename}		IMG_RENAME,
  			#{img.imgOriginalName}	IMG_ORIGINAL_NAME,
  			#{img.imgOrder}			IMG_ORDER
		FROM DUAL
  </foreach>
  )BI
</insert> -->
  <insert id="insertProperty" parameterType="com.elon.boot.domain.property.model.vo.Property">
    <selectKey keyProperty="propertyNo" order="BEFORE" resultType="long">
      SELECT SEQ_PROPERTY_NO.NEXTVAL FROM DUAL
    </selectKey>

    INSERT INTO PROPERTY_TBL (
      PROPERTY_NO, REALTOR_ID,
      PROPERTY_NAME, PROPERTY_TYPE,
      ROOM, BATHROOM, FLOOR, TOTAL_FLOOR,
      CONSTRUCTION_YEAR, AVAILABLE_DATE,
      STUDENT_PREF, SHORT_CONT,
      PRICE_TYPE, DEPOSIT, MONTHLY_RENT,
      MAINTENANCE_FEE, MAINTENANCE_INCL,
      ROAD_ADDRESS, PARCEL_ADDRESS, ADDRESS_DETAIL,
      PROVINCE, DISTRICT,
      LATITUDE, LONGITUDE,
      CONTRACT_AREA, DESCRIPTION,
      STATUS, CREATED_AT
    ) VALUES (
      #{propertyNo,       jdbcType=NUMERIC},
      #{realtorId,        jdbcType=VARCHAR},

      #{propertyName,     jdbcType=VARCHAR},
      #{propertyType,     jdbcType=VARCHAR},

      #{room,             jdbcType=NUMERIC},
      #{bathroom,         jdbcType=NUMERIC},
      #{floor,            jdbcType=NUMERIC},
      #{totalFloor,       jdbcType=NUMERIC},

      #{constructionYear, jdbcType=VARCHAR},
      #{availableDate,    jdbcType=VARCHAR},

      #{studentPref,      jdbcType=VARCHAR},   <!-- VARCHAR2(1) -->
      #{shortCont,        jdbcType=VARCHAR},   <!-- VARCHAR2(1) -->

      #{priceType,        jdbcType=VARCHAR},
      #{deposit,          jdbcType=NUMERIC},
      #{monthlyRent,      jdbcType=NUMERIC},

      #{maintenanceFee,   jdbcType=NUMERIC},
      #{maintenanceIncl,  jdbcType=VARCHAR},   <!-- VARCHAR2(1) -->

      #{roadAddress,      jdbcType=VARCHAR},
      #{parcelAddress,    jdbcType=VARCHAR},   <!-- 추가 -->
      #{addressDetail,    jdbcType=VARCHAR},

      #{province,         jdbcType=VARCHAR},
      #{district,         jdbcType=VARCHAR},

      #{latitude,         jdbcType=NUMERIC},
      #{longitude,        jdbcType=NUMERIC},

      #{contractArea,     jdbcType=NUMERIC},
      #{description,      jdbcType=CLOB},      <!-- CLOB -->

      'ACTIVE',
      SYSTIMESTAMP
    )
  </insert>

  <!-- 이미지 일괄 INSERT -->
  <insert id="insertPropertyImages">
    INSERT INTO PROPERTIES_IMG_TBL
    SELECT SEQ_PROPERTIES_IMG_NO.NEXTVAL, BI.*
    FROM (
      <foreach collection="list" item="img" separator=" UNION ALL ">
        SELECT
          #{img.propertyNo,     jdbcType=NUMERIC}  AS PROPERTY_NO,
          #{img.imgPath,        jdbcType=VARCHAR}  AS IMG_PATH,
          #{img.imgRename,      jdbcType=VARCHAR}  AS IMG_RENAME,
          #{img.imgOriginalName,jdbcType=VARCHAR}  AS IMG_ORIGINAL_NAME,
          #{img.imgOrder,       jdbcType=NUMERIC}  AS IMG_ORDER
        FROM DUAL
      </foreach>
    ) BI
  </insert>

</mapper>